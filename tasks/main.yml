---
#jinja2:variable_start_string:'[%',variable_end_string:'%]',trim_blocks:True,lstrip_blocks:True
- name: "Compute SFTP users."
  set_fact:
    _sftp_users: >-
      [{% for sftp_user in sftp_users -%}
        {{ sftp_user | combine({'home': sftp_user.home | default(sftp_home_partition + '/' + sftp_user.name) }) }}
        {{ '' if loop.last else ',' }}
      {%- endfor %}]

# Creates group for SFTP users.
- name: SFTP-Server | Create sftp user group
  group:
    name: "{{ sftp_group_name }}"
    state: present

# Necessary for chrooting of SFTP users.
- name: SFTP-Server | Alter sftp subsystem entry
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^Subsystem(\s+)sftp'
    line: "Subsystem sftp internal-sftp -f AUTH -l VERBOSE {% if sftp_umask is defined %}{{ '-u %s' % sftp_umask if sftp_umask != '' }}{% endif %}"
    state: present
  notify: SFTP-Server | Restart sshd

- name: SFTP-Server | Ensure SELinux management package is present
  package:
    name: "{{ 'python-semanage' if ansible_distribution == 'Debian' else 'libsemanage-python' }}"
    state: present
  when: ansible_selinux and sftp_enable_selinux_support

- name: SFTP-Server | Set SELinux booleans
  seboolean:
    name: "{{ item }}"
    state: yes
    persistent: yes
  ignore_errors: yes
  loop:
    #- "{% if ansible_os_family == 'RedHat' and ansible_distribution_major_version|int < 7 %}ssh_chroot_full_access{% endif %}"
    - ssh_chroot_full_access
    - ssh_chroot_rw_homedirs
  when: ansible_selinux and sftp_enable_selinux_support

- name: SFTP-Server | Add sshd_config block
  blockinfile:
    dest: /etc/ssh/sshd_config
    marker: '# {mark} Ansible managed SFTP-Server {{ sftp_group_name }} block'
    block: |
      Match Group {{ sftp_group_name }}
          ChrootDirectory {{ sftp_home_partition }}
          AuthorizedKeysFile {{ sftp_key_partition | default(sftp_home_partition) }}/%u/.ssh/authorized_keys
          AllowTCPForwarding no
          X11Forwarding no
          PasswordAuthentication {{ sftp_allow_passwords | ternary('yes', 'no') }}
        {% if sftp_umask is defined %}
        ForceCommand internal-sftp {{ sftp_enable_logging | ternary('-l VERBOSE', '') }} {{ '-u %s' % sftp_umask if sftp_umask != '' }}
        {% else %}
        ForceCommand internal-sftp {{ sftp_enable_logging | ternary('-l VERBOSE', '') }}
        {% endif %}
  notify: SFTP-Server | Restart sshd

- name: SFTP-Server | Create sftp user's group
  group:
    name: "{{ item }}"
    state: present
  with_items: "{{ _sftp_users | selectattr('group', 'defined') | map(attribute='group') | list }}"

- name: SFTP-Server | Create sftp_home_partition
  file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: 0755
    seuser: 'system_u'
    serole: 'object_r'
    setype: 'home_root_t'
    state: directory
  with_items:
    - "{{ sftp_home_partition }}"
    - "{% if sftp_key_partition is defined %}{{ sftp_key_partition }}{% endif %}"
    - flags:
      skip_missing: True

# Create each SFTP user with home directory on the correct partition, and add to SFTP group.
- name: SFTP-Server | Create sftp users
  user:
    name: "{{ item.name }}"
    group: "{{ item.group | default(omit) }}"
    groups: "{{ sftp_group_name }}"
    append: "{{ item.append | default(False) }}"
    home: "{{ item.home }}"
    # `None` means default value -> default is to have a shell
    shell: "{{ None if (item.shell | default(True)) else sftp_nologin_shell }}"
    skeleton: "{{ item.skeleton | default(omit) }}"
    state: present
  with_items: "{{ _sftp_users }}"

# A working chrooted SFTP setup requires root:sftgroup ownership of a user's home directory.
- name: SFTP-Server | Correct ownership and permission of home directories
  file:
    path: "{{ item.home }}"
    owner: root
    group: "{{ item.group | default(sftp_group_name) }}"
    mode: "{{ item.mode | default(0750) }}"
    seuser: 'unconfined_u'
    serole: 'object_r'
    setype: 'user_home_dir_t'
  with_items: "{{ _sftp_users }}"

- name: SFTP-Server | Create sftp_key_partition/<user>/.ssh
  file:
    path: "{{ sftp_key_partition }}/{{ item.name }}/.ssh"
    owner: "{{ item.name }}"
    group: "{{ item.group | default(sftp_group_name) }}"
    mode: 0750
    state: directory
    recurse: yes
    seuser: 'unconfined_u'
    serole: 'object_r'
    setype: 'ssh_home_t'
  with_items: "{{ _sftp_users }}"
  when: sftp_key_partition is defined


# Install all relevant public keys.
- name: SFTP-Server | Install public keys
  authorized_key:
    path: "{{ sftp_key_partition |default(sftp_home_partition) }}/{{item.0.name}}/.ssh/authorized_keys"
    user: "{{ item.0.name }}"
    key: "{{ item.1 }}"
    #state: "{{ item.1.state|default(present) }}"
  with_subelements:
    - "{{ _sftp_users }}"
    - ssh_keys
    - flags:
      skip_missing: True

# Update user passwords, if they were specified.
- name: SFTP-Server | Update user passwords
  user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
  with_items: "{{ _sftp_users }}"
  when: item.password is defined

# Create directories for all SFTP users. Optional, but recommended.
- name: SFTP-Server | Create directories
  file:
    path: "{{ item[0].home }}/{{ item[1].name | default(item[1]) }}"
    owner: "{{ item[0].name }}"
    group: "{{ item[0].group | default(item[0].name) }}"
    mode: "{{ item[1].mode | default(0750) }}"
    state: directory
  with_nested:
    - "{{ _sftp_users }}"
    - "{{ sftp_directories }}"

# Create directories for individual SFTP users. Optional.
- name: SFTP-Server | Create directories per user
  file:
    path: "{{ item[0].home }}/{{ item[1].name | default(item[1]) }}"
    owner: "{{ item[0].name }}"
    group: "{{ item[0].group | default(item[0].name) }}"
    mode: "{{ item[1].mode | default(0750) }}"
    state: directory
  with_subelements:
    - "{{ _sftp_users }}"
    - "sftp_directories"
    - flags:
      skip_missing: True

- name: SFTP-Server | Enable Logging
  blockinfile:
    dest: "/etc/rsyslog.d/sshd.conf"
    create: yes
    block: |
      # Log internal-sftp in a separate file
      :programname, isequal, "internal-sftp" -/var/log/sftp/verbose.log
      :programname, isequal, "internal-sftp" ~

      # additionally write an auth log
      auth,authpriv.*  /var/log/sftp/auth.log
  when: sftp_enable_logging
  notify: SFTP-Server | Restart rsyslog
